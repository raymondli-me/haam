#!/usr/bin/env python3
"""
Unified Codebase Analyzer
=========================
Combines comprehensive file detection with advanced UI and robust import analysis.
Best of both analyzers merged into one powerful tool.
"""

import ast
import os
import json
import argparse
import webbrowser
from pathlib import Path
from datetime import datetime
from collections import defaultdict
import re


class UnifiedCodebaseAnalyzer:
    """Ultimate analyzer combining best features from both versions."""
    
    def __init__(self, root_path=".", package_name=None):
        self.root_path = Path(root_path).resolve()
        self.package_name = package_name or self.root_path.name
        self.nodes = []
        self.edges = []
        self.edge_set = set()  # Avoid duplicate edges
        self.stats = defaultdict(int)
        self.module_map = {}  # Maps module paths to node IDs
        self.file_map = {}  # Maps file paths to node IDs
        
    def analyze(self):
        """Analyze the entire codebase with comprehensive detection."""
        print(f"\n🔍 Analyzing codebase at: {self.root_path}")
        print(f"📦 Package name: {self.package_name}")
        print("=" * 60)
        
        # Collect ALL Python files (comprehensive like final)
        python_files = self.collect_python_files_comprehensive()
        print(f"✓ Found {len(python_files)} Python files")
        
        # First pass: Create nodes for all files
        print("\n📊 Creating nodes...")
        for filepath in python_files:
            self.create_node(filepath)
        
        # Second pass: Analyze imports (robust like complete)
        print("\n🔗 Analyzing imports...")
        for filepath in python_files:
            self.analyze_file_imports(filepath)
        
        # Calculate metrics
        self.calculate_metrics()
        
        # Print detailed summary
        self.print_summary()
        
        return {
            'nodes': self.nodes,
            'edges': self.edges,
            'stats': dict(self.stats)
        }
    
    def collect_python_files_comprehensive(self):
        """Collect ALL Python files with better detection (from final analyzer)."""
        ignore_dirs = {
            '__pycache__', '.git', 'venv', 'env', '.venv', '.env',
            'build', 'dist', '.egg-info', 'node_modules',
            '.tox', '.pytest_cache', '.mypy_cache', 'htmlcov',
            '.coverage', '.hypothesis', '.ruff_cache',
            'archive'  # Exclude archived files
        }
        
        python_files = []
        excluded_files = []
        
        for root, dirs, files in os.walk(self.root_path):
            # Remove ignored directories
            dirs[:] = [d for d in dirs if d not in ignore_dirs and not d.endswith('.egg-info')]
            
            for file in files:
                if file.endswith('.py'):
                    filepath = Path(root) / file
                    
                    # More lenient filtering - include more files
                    if self.should_include_file(filepath):
                        python_files.append(filepath)
                    else:
                        excluded_files.append(filepath)
                        self.stats['excluded_files'] += 1
        
        if excluded_files:
            print(f"  ℹ️  Excluded {len(excluded_files)} files (Jupyter exports, etc.)")
        
        return sorted(python_files)
    
    def should_include_file(self, filepath):
        """Determine if file should be included (more inclusive approach)."""
        try:
            with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                first_lines = f.read(500)
                
            # Only exclude obvious Jupyter/Colab exports
            strong_jupyter_markers = [
                'get_ipython()',
                'from google.colab import',
                '# coding: utf-8\n"""Automatically generated by Colaboratory',
                'Created by Colaboratory',
                '# -*- coding: utf-8 -*-\n"""'  # Common Colab header
            ]
            
            # Be more selective about exclusion
            for marker in strong_jupyter_markers:
                if marker in first_lines:
                    return False
            
            # Include everything else
            return True
            
        except:
            # If we can't read it, include it anyway
            return True
    
    def create_node(self, filepath):
        """Create a node with comprehensive metrics (enhanced from complete)."""
        relative_path = filepath.relative_to(self.root_path)
        node_id = str(relative_path).replace(os.sep, '_').replace('.py', '')
        
        # Store mappings for import resolution
        self.file_map[str(relative_path)] = node_id
        
        # Create module path for import matching
        parts = list(relative_path.parts)
        if parts[-1] == '__init__.py':
            module_path = '.'.join(parts[:-1])
        else:
            parts[-1] = parts[-1].replace('.py', '')
            module_path = '.'.join(parts)
        
        self.module_map[module_path] = node_id
        
        try:
            with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            lines = len(content.splitlines())
            
            # Parse AST for detailed metrics
            try:
                tree = ast.parse(content)
                functions = sum(1 for n in ast.walk(tree) if isinstance(n, ast.FunctionDef))
                classes = sum(1 for n in ast.walk(tree) if isinstance(n, ast.ClassDef))
                
                # Calculate cyclomatic complexity
                complexity = 1
                for node in ast.walk(tree):
                    if isinstance(node, (ast.If, ast.While, ast.For, ast.ExceptHandler)):
                        complexity += 1
                    elif isinstance(node, ast.BoolOp):
                        complexity += len(node.values) - 1
                
                # Count docstrings
                docstrings = sum(1 for n in ast.walk(tree) 
                               if isinstance(n, (ast.FunctionDef, ast.ClassDef, ast.Module)) 
                               and ast.get_docstring(n))
                
            except:
                functions = 0
                classes = 0
                complexity = 0
                docstrings = 0
            
            # Enhanced node type detection
            node_type, color = self.determine_node_type_enhanced(filepath, relative_path, content)
            
            # Calculate size based on lines of code
            size = max(30, min(100, 30 + (lines ** 0.5) * 2))
            
            node = {
                'data': {
                    'id': node_id,
                    'label': filepath.name,
                    'path': str(relative_path),
                    'module_path': module_path,
                    'type': node_type,
                    'lines': lines,
                    'functions': functions,
                    'classes': classes,
                    'complexity': complexity,
                    'docstrings': docstrings,
                    'color': color,
                    'size': size
                }
            }
            
            self.nodes.append(node)
            
            # Update comprehensive stats
            self.stats['total_lines'] += lines
            self.stats['total_functions'] += functions
            self.stats['total_classes'] += classes
            self.stats['total_complexity'] += complexity
            self.stats[f'{node_type}_count'] += 1
            
        except Exception as e:
            print(f"  ⚠️  Warning: Error creating node for {filepath}: {e}")
    
    def determine_node_type_enhanced(self, filepath, relative_path, content):
        """Enhanced node type detection with better categorization."""
        name = filepath.name
        path_str = str(relative_path).lower()
        
        # Priority-based categorization
        if name == '__init__.py':
            return 'package', '#9b59b6'  # Purple
        elif name == 'setup.py' or name == 'setup.cfg':
            return 'setup', '#e74c3c'  # Red
        elif 'test' in name or '/test' in path_str or 'tests/' in path_str:
            return 'test', '#f39c12'  # Orange
        elif 'example' in path_str or 'demo' in path_str or 'sample' in path_str:
            return 'example', '#95a5a6'  # Gray
        elif 'doc' in path_str or 'docs/' in path_str:
            return 'documentation', '#8e44ad'  # Dark purple
        elif name.startswith('_') and name != '__init__.py':
            return 'private', '#34495e'  # Dark gray
        elif 'util' in name or 'helper' in name or 'common' in name:
            return 'utility', '#16a085'  # Teal
        elif 'config' in name or 'settings' in name:
            return 'config', '#d35400'  # Dark orange
        elif self.package_name in str(relative_path) and len(relative_path.parts) > 1:
            return 'module', '#3498db'  # Blue
        else:
            return 'script', '#2ecc71'  # Green
    
    def analyze_file_imports(self, filepath):
        """Analyze all imports with robust detection (from complete analyzer)."""
        try:
            with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
            
            tree = ast.parse(content)
            
            relative_path = filepath.relative_to(self.root_path)
            source_id = self.file_map[str(relative_path)]
            source_dir = filepath.parent
            
            # Walk the AST to find all imports
            for node in ast.walk(tree):
                if isinstance(node, ast.Import):
                    for alias in node.names:
                        self.process_import(source_id, source_dir, alias.name)
                        
                elif isinstance(node, ast.ImportFrom):
                    if node.level == 0 and node.module:
                        # Absolute import
                        self.process_from_import(source_id, source_dir, node.module, 
                                                [n.name for n in node.names])
                    elif node.level > 0:
                        # Relative import
                        self.process_relative_import(source_id, source_dir, node.level,
                                                    node.module, [n.name for n in node.names])
        
        except Exception as e:
            if "invalid syntax" not in str(e).lower():
                print(f"  ⚠️  Warning: Error analyzing {filepath.name}: {e}")
    
    def process_import(self, source_id, source_dir, module_name):
        """Process: import module_name"""
        target_id = self.resolve_import(source_dir, module_name)
        if target_id and target_id != source_id:
            self.add_edge(source_id, target_id, 'import')
            self.stats['standard_imports'] += 1
    
    def process_from_import(self, source_id, source_dir, module_name, names):
        """Process: from module_name import names"""
        target_id = self.resolve_import(source_dir, module_name)
        if target_id and target_id != source_id:
            self.add_edge(source_id, target_id, 'from_import')
            self.stats['from_imports'] += 1
    
    def process_relative_import(self, source_id, source_dir, level, module, names):
        """Process relative imports with robust resolution."""
        base_dir = source_dir
        for _ in range(level - 1):
            base_dir = base_dir.parent
        
        if module:
            target_path = base_dir / module.replace('.', os.sep)
            
            # Try multiple resolutions
            candidates = [
                target_path.with_suffix('.py'),
                target_path / '__init__.py'
            ]
            
            for candidate in candidates:
                if candidate.exists():
                    relative_path = candidate.relative_to(self.root_path)
                    target_id = self.file_map.get(str(relative_path))
                    if target_id and target_id != source_id:
                        self.add_edge(source_id, target_id, 'relative_import')
                        self.stats['relative_imports'] += 1
                        break
        else:
            # from . import something
            for name in names:
                candidates = [
                    base_dir / f"{name}.py",
                    base_dir / name / '__init__.py'
                ]
                
                for candidate in candidates:
                    if candidate.exists():
                        relative_path = candidate.relative_to(self.root_path)
                        target_id = self.file_map.get(str(relative_path))
                        if target_id and target_id != source_id:
                            self.add_edge(source_id, target_id, 'relative_import')
                            self.stats['relative_imports'] += 1
                            break
    
    def resolve_import(self, source_dir, module_name):
        """Resolve module imports with comprehensive pattern matching."""
        # Skip standard library and external packages
        if self.is_standard_or_external(module_name):
            return None
        
        # Direct module map lookup
        if module_name in self.module_map:
            return self.module_map[module_name]
        
        # Package-specific patterns
        if module_name.startswith(f"{self.package_name}."):
            # Try various resolution strategies
            if module_name in self.module_map:
                return self.module_map[module_name]
            
            without_prefix = module_name[len(self.package_name) + 1:]
            if without_prefix in self.module_map:
                return self.module_map[without_prefix]
        
        # Special handling for package-specific patterns (e.g., haam)
        if self.package_name == 'haam' and module_name.startswith('haam'):
            parts = module_name.split('.')
            if len(parts) == 2 and parts[0] == 'haam':
                # Try common patterns
                patterns = [
                    f"haam.haam_{parts[1]}",
                    f"haam_{parts[1]}",
                    f"haam.{parts[1]}"
                ]
                for pattern in patterns:
                    if pattern in self.module_map:
                        return self.module_map[pattern]
        
        # Try progressively shorter paths
        parts = module_name.split('.')
        for i in range(len(parts), 0, -1):
            test_path = '.'.join(parts[:i])
            if test_path in self.module_map:
                return self.module_map[test_path]
        
        return None
    
    def is_standard_or_external(self, module_name):
        """Check if module is standard library or external package."""
        if not module_name:
            return True
        
        # Comprehensive standard library list
        stdlib = {
            'os', 'sys', 'io', 'time', 'datetime', 'json', 'csv', 're', 'math',
            'random', 'collections', 'itertools', 'functools', 'typing', 'ast',
            'pathlib', 'subprocess', 'threading', 'multiprocessing', 'queue',
            'unittest', 'doctest', 'pdb', 'warnings', 'copy', 'pickle', 'shelve',
            'sqlite3', 'hashlib', 'hmac', 'secrets', 'urllib', 'http', 'email',
            'argparse', 'logging', 'configparser', 'tempfile', 'shutil', 'glob',
            'fnmatch', 'zipfile', 'tarfile', 'gzip', 'bz2', 'lzma', 'base64',
            'struct', 'codecs', 'locale', 'gettext', 'string', 'textwrap',
            'difflib', 'pprint', 'reprlib', 'enum', 'abc', 'contextlib',
            'decimal', 'fractions', 'numbers', 'cmath', 'statistics', 'random'
        }
        
        # Common external packages
        external = {
            'numpy', 'pandas', 'matplotlib', 'scipy', 'sklearn', 'tensorflow',
            'torch', 'keras', 'pytest', 'requests', 'flask', 'django', 'fastapi',
            'sqlalchemy', 'celery', 'redis', 'boto3', 'pillow', 'opencv', 'nltk',
            'spacy', 'transformers', 'datasets', 'accelerate', 'tqdm', 'rich',
            'click', 'typer', 'pydantic', 'jinja2', 'yaml', 'toml', 'dotenv',
            'seaborn', 'plotly', 'bokeh', 'streamlit', 'gradio', 'jupyterlab',
            'beautifulsoup4', 'lxml', 'pymongo', 'psycopg2', 'aiohttp', 'uvicorn'
        }
        
        first_part = module_name.split('.')[0]
        return first_part in stdlib or first_part in external
    
    def add_edge(self, source_id, target_id, edge_type):
        """Add unique edge between nodes."""
        edge_key = (source_id, target_id, edge_type)
        if edge_key not in self.edge_set:
            self.edge_set.add(edge_key)
            
            edge = {
                'data': {
                    'id': f"{source_id}_to_{target_id}_{edge_type}",
                    'source': source_id,
                    'target': target_id,
                    'type': edge_type
                }
            }
            
            self.edges.append(edge)
    
    def calculate_metrics(self):
        """Calculate comprehensive graph metrics."""
        # Calculate degree for each node
        in_degree = defaultdict(int)
        out_degree = defaultdict(int)
        
        for edge in self.edges:
            out_degree[edge['data']['source']] += 1
            in_degree[edge['data']['target']] += 1
        
        # Update nodes with degree information
        for node in self.nodes:
            node_id = node['data']['id']
            node['data']['in_degree'] = in_degree.get(node_id, 0)
            node['data']['out_degree'] = out_degree.get(node_id, 0)
            node['data']['total_degree'] = node['data']['in_degree'] + node['data']['out_degree']
        
        # Calculate comprehensive statistics
        self.stats['total_nodes'] = len(self.nodes)
        self.stats['total_edges'] = len(self.edges)
        self.stats['orphan_nodes'] = sum(1 for n in self.nodes if n['data']['total_degree'] == 0)
        self.stats['hub_nodes'] = sum(1 for n in self.nodes if n['data']['total_degree'] >= 5)
        self.stats['leaf_nodes'] = sum(1 for n in self.nodes if n['data']['out_degree'] == 0 and n['data']['in_degree'] > 0)
        
        if self.nodes:
            degrees = [n['data']['total_degree'] for n in self.nodes]
            self.stats['avg_degree'] = sum(degrees) / len(self.nodes)
            self.stats['max_degree'] = max(degrees)
            self.stats['avg_complexity'] = self.stats['total_complexity'] / len(self.nodes)
        else:
            self.stats['avg_degree'] = 0
            self.stats['max_degree'] = 0
            self.stats['avg_complexity'] = 0
    
    def print_summary(self):
        """Print detailed analysis summary."""
        print("\n" + "=" * 60)
        print("📊 ANALYSIS COMPLETE")
        print("=" * 60)
        print(f"  📁 Total files: {self.stats['total_nodes']}")
        print(f"  🔗 Total imports: {self.stats['total_edges']}")
        print(f"  📝 Total lines: {self.stats['total_lines']:,}")
        print(f"  🎯 Functions: {self.stats['total_functions']}")
        print(f"  🏗️  Classes: {self.stats['total_classes']}")
        print(f"  🔴 Orphan files: {self.stats['orphan_nodes']}")
        print(f"  ⭐ Hub files: {self.stats['hub_nodes']}")
        print(f"  🍃 Leaf files: {self.stats.get('leaf_nodes', 0)}")
        
        print("\n📈 Import breakdown:")
        import_types = ['standard_imports', 'from_imports', 'relative_imports']
        for import_type in import_types:
            if self.stats.get(import_type, 0) > 0:
                print(f"  - {import_type.replace('_', ' ').title()}: {self.stats[import_type]}")
        
        print("\n📂 File types:")
        for key, value in sorted(self.stats.items()):
            if key.endswith('_count') and value > 0:
                file_type = key.replace('_count', '').title()
                print(f"  - {file_type}: {value}")


def generate_advanced_html_visualization(graph_data, output_file='codebase_unified.html'):
    """Generate the advanced interactive HTML visualization."""
    
    html_content = f'''<!DOCTYPE html>
<html>
<head>
    <title>Codebase Structure - Unified Analysis</title>
    <meta charset="utf-8">
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            height: 100vh;
            overflow: hidden;
        }}
        
        #container {{
            display: flex;
            height: 100vh;
            background: rgba(255, 255, 255, 0.95);
            margin: 10px;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
        }}
        
        #cy {{
            flex: 1;
            background: white;
            border-radius: 12px 0 0 12px;
        }}
        
        #sidebar {{
            width: 420px;
            background: linear-gradient(180deg, #f8f9fa 0%, #ffffff 100%);
            border-left: 1px solid #e9ecef;
            overflow-y: auto;
            padding: 25px;
            border-radius: 0 12px 12px 0;
        }}
        
        h1 {{
            color: #2c3e50;
            font-size: 28px;
            margin-bottom: 5px;
            font-weight: 600;
        }}
        
        .subtitle {{
            color: #7f8c8d;
            font-size: 14px;
            margin-bottom: 20px;
        }}
        
        .search-container {{
            position: relative;
            margin-bottom: 20px;
        }}
        
        #search-box {{
            width: 100%;
            padding: 12px 40px 12px 15px;
            border: 2px solid #e0e6ed;
            border-radius: 8px;
            font-size: 14px;
            transition: all 0.3s ease;
        }}
        
        #search-box:focus {{
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }}
        
        .search-icon {{
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #95a5a6;
        }}
        
        .stats-grid {{
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
            margin-bottom: 25px;
        }}
        
        .stat-card {{
            background: white;
            padding: 15px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            transition: transform 0.2s ease;
        }}
        
        .stat-card:hover {{
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.12);
        }}
        
        .stat-label {{
            color: #7f8c8d;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 5px;
        }}
        
        .stat-value {{
            color: #2c3e50;
            font-size: 24px;
            font-weight: 600;
        }}
        
        .controls {{
            margin-bottom: 25px;
        }}
        
        .control-section {{
            margin-bottom: 20px;
        }}
        
        h3 {{
            color: #34495e;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            margin-bottom: 10px;
        }}
        
        .button-group {{
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
        }}
        
        button {{
            padding: 8px 16px;
            background: white;
            color: #34495e;
            border: 2px solid #e0e6ed;
            border-radius: 6px;
            font-size: 13px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }}
        
        button:hover {{
            background: #667eea;
            color: white;
            border-color: #667eea;
            transform: translateY(-1px);
        }}
        
        button.active {{
            background: #667eea;
            color: white;
            border-color: #667eea;
        }}
        
        .node-info {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
            margin-bottom: 25px;
        }}
        
        .node-info h3 {{
            color: #2c3e50;
            margin-bottom: 15px;
        }}
        
        .info-row {{
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
            border-bottom: 1px solid #f0f3f7;
        }}
        
        .info-row:last-child {{
            border-bottom: none;
        }}
        
        .info-label {{
            color: #7f8c8d;
            font-size: 13px;
        }}
        
        .info-value {{
            color: #2c3e50;
            font-weight: 500;
            font-size: 13px;
        }}
        
        .legend {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
        }}
        
        .legend-item {{
            display: flex;
            align-items: center;
            margin: 10px 0;
        }}
        
        .legend-color {{
            width: 24px;
            height: 24px;
            margin-right: 12px;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        }}
        
        .legend-label {{
            color: #34495e;
            font-size: 13px;
        }}
        
        /* Loading animation */
        .loading {{
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 24px;
            color: #667eea;
            z-index: 1000;
        }}
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cytoscape/3.26.0/cytoscape.min.js"></script>
</head>
<body>
    <div class="loading" id="loading">Initializing visualization...</div>
    <div id="container" style="opacity: 0;">
        <div id="cy"></div>
        <div id="sidebar">
            <h1>🗂️ Codebase Structure</h1>
            <p class="subtitle">Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            
            <div class="search-container">
                <input type="text" id="search-box" placeholder="Search files, paths, or modules..." />
                <span class="search-icon">🔍</span>
            </div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-label">Total Files</div>
                    <div class="stat-value">{graph_data['stats'].get('total_nodes', 0)}</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Total Lines</div>
                    <div class="stat-value">{graph_data['stats'].get('total_lines', 0):,}</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Import Links</div>
                    <div class="stat-value">{graph_data['stats'].get('total_edges', 0)}</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Orphan Files</div>
                    <div class="stat-value">{graph_data['stats'].get('orphan_nodes', 0)}</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Hub Files</div>
                    <div class="stat-value">{graph_data['stats'].get('hub_nodes', 0)}</div>
                </div>
                <div class="stat-card">
                    <div class="stat-label">Avg Connections</div>
                    <div class="stat-value">{graph_data['stats'].get('avg_degree', 0):.1f}</div>
                </div>
            </div>
            
            <div class="controls">
                <div class="control-section">
                    <h3>Layout Options</h3>
                    <div class="button-group">
                        <button onclick="applyLayout('cose')" class="active">Force-Directed</button>
                        <button onclick="applyLayout('breadthfirst')">Hierarchy</button>
                        <button onclick="applyLayout('circle')">Circle</button>
                        <button onclick="applyLayout('grid')">Grid</button>
                        <button onclick="applyLayout('concentric')">Concentric</button>
                    </div>
                </div>
                
                <div class="control-section">
                    <h3>Highlight Filters</h3>
                    <div class="button-group">
                        <button onclick="highlightType('module')">Modules</button>
                        <button onclick="highlightType('test')">Tests</button>
                        <button onclick="highlightType('package')">Packages</button>
                        <button onclick="highlightType('utility')">Utilities</button>
                        <button onclick="highlightOrphans()">Orphans</button>
                        <button onclick="highlightHubs()">Hubs</button>
                        <button onclick="highlightLeaves()">Leaves</button>
                        <button onclick="resetHighlight()">Reset All</button>
                    </div>
                </div>
            </div>
            
            <div class="node-info" id="node-info">
                <h3>📋 Node Details</h3>
                <p style="color: #95a5a6; text-align: center; padding: 20px;">
                    Click on any node to view detailed information
                </p>
            </div>
            
            <div class="legend">
                <h3>🎨 Legend</h3>
                <div class="legend-item">
                    <div class="legend-color" style="background:#3498db;"></div>
                    <span class="legend-label">Module</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background:#2ecc71;"></div>
                    <span class="legend-label">Script</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background:#f39c12;"></div>
                    <span class="legend-label">Test</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background:#9b59b6;"></div>
                    <span class="legend-label">Package</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background:#16a085;"></div>
                    <span class="legend-label">Utility</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background:#95a5a6;"></div>
                    <span class="legend-label">Example</span>
                </div>
                <div class="legend-item">
                    <div class="legend-color" style="background:#e74c3c;"></div>
                    <span class="legend-label">Setup</span>
                </div>
            </div>
        </div>
    </div>
    
    <script>
        const graphData = {json.dumps(graph_data)};
        
        console.log('Initializing graph with', graphData.nodes.length, 'nodes and', graphData.edges.length, 'edges');
        
        // Initialize Cytoscape
        const cy = cytoscape({{
            container: document.getElementById('cy'),
            elements: {{
                nodes: graphData.nodes,
                edges: graphData.edges
            }},
            style: [
                {{
                    selector: 'node',
                    style: {{
                        'label': 'data(label)',
                        'background-color': 'data(color)',
                        'width': 'data(size)',
                        'height': 'data(size)',
                        'text-valign': 'center',
                        'text-halign': 'center',
                        'font-size': '11px',
                        'font-weight': '500',
                        'text-outline-width': 2,
                        'text-outline-color': '#ffffff',
                        'border-width': 2,
                        'border-color': '#ffffff',
                        'shadow-blur': 10,
                        'shadow-color': '#000000',
                        'shadow-opacity': 0.1,
                        'shadow-offset-x': 2,
                        'shadow-offset-y': 2
                    }}
                }},
                {{
                    selector: 'edge',
                    style: {{
                        'width': 2,
                        'line-color': '#cbd5e0',
                        'target-arrow-color': '#94a3b8',
                        'target-arrow-shape': 'triangle',
                        'curve-style': 'bezier',
                        'opacity': 0.6,
                        'arrow-scale': 1
                    }}
                }},
                {{
                    selector: '.highlighted',
                    style: {{
                        'background-color': '#ff6b6b',
                        'line-color': '#ff6b6b',
                        'target-arrow-color': '#ff6b6b',
                        'z-index': 999,
                        'width': 3
                    }}
                }},
                {{
                    selector: '.dimmed',
                    style: {{
                        'opacity': 0.15
                    }}
                }},
                {{
                    selector: ':selected',
                    style: {{
                        'background-color': '#667eea',
                        'border-color': '#5a67d8',
                        'border-width': 3
                    }}
                }}
            ],
            layout: {{
                name: 'cose',
                animate: false,
                animationDuration: 1000,
                nodeRepulsion: 8000,
                idealEdgeLength: 100,
                edgeElasticity: 100,
                nestingFactor: 5,
                gravity: 80,
                numIter: 1000,
                initialTemp: 200,
                coolingFactor: 0.95,
                minTemp: 1.0
            }}
        }});
        
        // Remove loading and show container
        setTimeout(() => {{
            document.getElementById('loading').style.display = 'none';
            document.getElementById('container').style.opacity = '1';
            document.getElementById('container').style.transition = 'opacity 0.5s ease';
        }}, 100);
        
        // Track active layout button
        let activeLayoutButton = document.querySelector('button.active');
        
        // Node click handler
        cy.on('tap', 'node', function(evt) {{
            const node = evt.target;
            const data = node.data();
            
            const imports = cy.edges(`[source = "${{data.id}}"]`).length;
            const importedBy = cy.edges(`[target = "${{data.id}}"]`).length;
            
            document.getElementById('node-info').innerHTML = `
                <h3>📋 Node Details</h3>
                <div class="info-row">
                    <span class="info-label">Name</span>
                    <span class="info-value">${{data.label}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Type</span>
                    <span class="info-value">${{data.type}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Path</span>
                    <span class="info-value" style="font-size: 11px;">${{data.path}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Lines of Code</span>
                    <span class="info-value">${{data.lines || 0}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Functions</span>
                    <span class="info-value">${{data.functions || 0}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Classes</span>
                    <span class="info-value">${{data.classes || 0}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Complexity</span>
                    <span class="info-value">${{data.complexity || 0}}</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Imports</span>
                    <span class="info-value">${{imports}} modules</span>
                </div>
                <div class="info-row">
                    <span class="info-label">Imported by</span>
                    <span class="info-value">${{importedBy}} modules</span>
                </div>
            `;
        }});
        
        // Search functionality with debouncing
        let searchTimeout;
        document.getElementById('search-box').addEventListener('input', function(e) {{
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {{
                const searchTerm = e.target.value.toLowerCase();
                
                cy.elements().removeClass('highlighted dimmed');
                
                if (searchTerm) {{
                    cy.elements().addClass('dimmed');
                    cy.nodes().forEach(node => {{
                        if (node.data('label').toLowerCase().includes(searchTerm) ||
                            node.data('path').toLowerCase().includes(searchTerm) ||
                            node.data('module_path').toLowerCase().includes(searchTerm)) {{
                            node.removeClass('dimmed').addClass('highlighted');
                            node.connectedEdges().removeClass('dimmed');
                        }}
                    }});
                }}
            }}, 300);
        }});
        
        // Layout functions
        function applyLayout(layoutName) {{
            // Update active button
            if (activeLayoutButton) {{
                activeLayoutButton.classList.remove('active');
            }}
            event.target.classList.add('active');
            activeLayoutButton = event.target;
            
            const layouts = {{
                'cose': {{
                    name: 'cose',
                    animate: true,
                    animationDuration: 1000,
                    nodeRepulsion: 8000,
                    idealEdgeLength: 100,
                    gravity: 80
                }},
                'breadthfirst': {{
                    name: 'breadthfirst',
                    directed: true,
                    spacingFactor: 1.5,
                    animate: true,
                    animationDuration: 1000
                }},
                'circle': {{
                    name: 'circle',
                    animate: true,
                    animationDuration: 1000,
                    radius: 300
                }},
                'grid': {{
                    name: 'grid',
                    animate: true,
                    animationDuration: 1000,
                    padding: 30,
                    position: function(node) {{ return {{ row: node.data('row'), col: node.data('col') }}; }}
                }},
                'concentric': {{
                    name: 'concentric',
                    animate: true,
                    animationDuration: 1000,
                    levelWidth: function(nodes) {{ return 100; }},
                    concentric: function(node) {{ return node.degree(); }}
                }}
            }};
            
            cy.layout(layouts[layoutName]).run();
        }}
        
        // Highlight functions
        function highlightType(type) {{
            cy.elements().removeClass('highlighted dimmed');
            cy.elements().addClass('dimmed');
            cy.nodes(`[type = "${{type}}"]`).removeClass('dimmed').addClass('highlighted');
            cy.nodes(`[type = "${{type}}"]`).connectedEdges().removeClass('dimmed');
        }}
        
        function highlightOrphans() {{
            cy.elements().removeClass('highlighted dimmed');
            cy.elements().addClass('dimmed');
            cy.nodes().filter(n => n.degree() === 0).removeClass('dimmed').addClass('highlighted');
        }}
        
        function highlightHubs() {{
            cy.elements().removeClass('highlighted dimmed');
            cy.elements().addClass('dimmed');
            cy.nodes().filter(n => n.degree() >= 5).removeClass('dimmed').addClass('highlighted');
            cy.nodes().filter(n => n.degree() >= 5).connectedEdges().removeClass('dimmed');
        }}
        
        function highlightLeaves() {{
            cy.elements().removeClass('highlighted dimmed');
            cy.elements().addClass('dimmed');
            cy.nodes().filter(n => n.data('out_degree') === 0 && n.data('in_degree') > 0)
                .removeClass('dimmed').addClass('highlighted');
            cy.nodes().filter(n => n.data('out_degree') === 0 && n.data('in_degree') > 0)
                .connectedEdges().removeClass('dimmed');
        }}
        
        function resetHighlight() {{
            cy.elements().removeClass('highlighted dimmed');
        }}
        
        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {{
            if (e.key === 'Escape') {{
                resetHighlight();
                document.getElementById('search-box').value = '';
            }}
            if (e.ctrlKey || e.metaKey) {{
                if (e.key === 'f') {{
                    e.preventDefault();
                    document.getElementById('search-box').focus();
                }}
            }}
        }});
    </script>
</body>
</html>'''
    
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    return output_file


def main():
    parser = argparse.ArgumentParser(
        description='🚀 Unified Codebase Analyzer - Best of Both Worlds',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''
Examples:
  %(prog)s                    # Analyze current directory
  %(prog)s /path/to/project   # Analyze specific project
  %(prog)s . -p mypackage     # Specify package name
  %(prog)s . --open           # Open visualization automatically
        '''
    )
    
    parser.add_argument('path', nargs='?', default='.',
                       help='Path to analyze (default: current directory)')
    parser.add_argument('-p', '--package', 
                       help='Package name (default: directory name)')
    parser.add_argument('-o', '--output', default='codebase_unified.html',
                       help='Output HTML file (default: codebase_unified.html)')
    parser.add_argument('--json', action='store_true',
                       help='Also save raw JSON data')
    parser.add_argument('--open', action='store_true',
                       help='Open visualization in browser after generation')
    
    args = parser.parse_args()
    
    # Run the unified analysis
    analyzer = UnifiedCodebaseAnalyzer(args.path, args.package)
    graph_data = analyzer.analyze()
    
    # Generate the advanced visualization
    output_file = generate_advanced_html_visualization(graph_data, args.output)
    print(f"\n✅ Visualization saved to: {output_file}")
    
    # Save JSON data if requested
    if args.json:
        json_file = args.output.replace('.html', '_data.json')
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(graph_data, f, indent=2, default=str)
        print(f"📄 JSON data saved to: {json_file}")
    
    # Open in browser if requested
    if args.open:
        webbrowser.open(f'file://{Path(output_file).absolute()}')
        print("🌐 Opening visualization in browser...")


if __name__ == '__main__':
    main()